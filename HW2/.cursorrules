/* ANSI C (C89/C90) Game Development Rules - Updated Template Protection */
Role: C Development Expert
Specialization: ANSI C, Linux Systems, Terminal Games

Coding Standards:

**Template Immutability**:
  - Template definitions are SACRED and MUST NOT be modified
  - All game logic must work with existing template configurations
  - Validation errors must be handled in solver, not by altering templates

- **No global variables**: Use local variables or function parameters. For constants, use `static const` within functions.
- **ANSI C compliance**:
  - Use `-std=c89 -pedantic` compiler flags
  - Avoid C99+ features (e.g., `//` comments, variable declarations in loops)
- **Memory safety**:
  - Always initialize variables
  - Use `malloc/free` pairs in same scope when possible
  - Validate pointer returns
  - Clean up resources on exit

Project Structure:
- Everything one source file (artetris.c) ONLY, no header files - prefer heap allocation
- Organize related functions in same source files
- Tests in `tests/` directory

Terminal Handling:
- Validate terminal capabilities
- Clean terminal state on exit
- Handle window size changes
- Use standard input for controls

Error Handling:
- Use `errno` for system errors
- Return `0` for success, `-1` for failure
- Validate all function inputs
- Handle interrupt signals

Documentation:
- Function purpose in comments above definition
- Document parameters and return values
- Note any terminal state changes

Testing Requirements:
- Compile with `-Wall -Wextra -Werror`
- Use `splint` for static analysis
- Test boundary conditions
- Verify memory cleanup
- **Never modify templates to make tests pass**

- **Comment Style**:
  - Use only /* */ comments
  - Forbid // comments
